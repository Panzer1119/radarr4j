/*
 * Radarr
 * The way users should interact with Radarr programatically. To utilize any of these endpoints you will need a few pieces of information:  ex: localhost:7878/api/v3/movies?apiKey={key_here}  * url: localhost, 10.1.0.1, 192.168.1.1, etc * port: 7878 (unless you modify it) * apiKey: Located in Settings > General > Security
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.codemakers.radarr4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.radarr4j.model.NotificationMessage;
import de.codemakers.radarr4j.model.ProviderField;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Notification
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-12T01:48:34.579+02:00[Europe/Berlin]")
public class Notification {
  @SerializedName("onGrab")
  private Boolean onGrab = null;

  @SerializedName("onDownload")
  private Boolean onDownload = null;

  @SerializedName("onUpgrade")
  private Boolean onUpgrade = null;

  @SerializedName("onRename")
  private Boolean onRename = null;

  @SerializedName("onDelete")
  private Boolean onDelete = null;

  @SerializedName("onHealthIssue")
  private Boolean onHealthIssue = null;

  @SerializedName("supportsOnGrab")
  private Boolean supportsOnGrab = null;

  @SerializedName("supportsOnDownload")
  private Boolean supportsOnDownload = null;

  @SerializedName("supportsOnUpgrade")
  private Boolean supportsOnUpgrade = null;

  @SerializedName("supportsOnRename")
  private Boolean supportsOnRename = null;

  @SerializedName("supportsOnDelete")
  private Boolean supportsOnDelete = null;

  @SerializedName("supportsOnHealthIssue")
  private Boolean supportsOnHealthIssue = null;

  @SerializedName("includeHealthWarnings")
  private Boolean includeHealthWarnings = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("fields")
  private List<ProviderField> fields = new ArrayList<>();

  @SerializedName("implementationName")
  private String implementationName = null;

  @SerializedName("implementation")
  private String implementation = null;

  @SerializedName("configContract")
  private String configContract = null;

  @SerializedName("infoLink")
  private String infoLink = null;

  @SerializedName("message")
  private NotificationMessage message = null;

  @SerializedName("tags")
  private List<Integer> tags = new ArrayList<>();

  @SerializedName("id")
  private Integer id = null;

  public Notification onGrab(Boolean onGrab) {
    this.onGrab = onGrab;
    return this;
  }

   /**
   * Get onGrab
   * @return onGrab
  **/
  @Schema(required = true, description = "")
  public Boolean isOnGrab() {
    return onGrab;
  }

  public void setOnGrab(Boolean onGrab) {
    this.onGrab = onGrab;
  }

  public Notification onDownload(Boolean onDownload) {
    this.onDownload = onDownload;
    return this;
  }

   /**
   * Get onDownload
   * @return onDownload
  **/
  @Schema(required = true, description = "")
  public Boolean isOnDownload() {
    return onDownload;
  }

  public void setOnDownload(Boolean onDownload) {
    this.onDownload = onDownload;
  }

  public Notification onUpgrade(Boolean onUpgrade) {
    this.onUpgrade = onUpgrade;
    return this;
  }

   /**
   * Get onUpgrade
   * @return onUpgrade
  **/
  @Schema(required = true, description = "")
  public Boolean isOnUpgrade() {
    return onUpgrade;
  }

  public void setOnUpgrade(Boolean onUpgrade) {
    this.onUpgrade = onUpgrade;
  }

  public Notification onRename(Boolean onRename) {
    this.onRename = onRename;
    return this;
  }

   /**
   * Get onRename
   * @return onRename
  **/
  @Schema(required = true, description = "")
  public Boolean isOnRename() {
    return onRename;
  }

  public void setOnRename(Boolean onRename) {
    this.onRename = onRename;
  }

  public Notification onDelete(Boolean onDelete) {
    this.onDelete = onDelete;
    return this;
  }

   /**
   * Get onDelete
   * @return onDelete
  **/
  @Schema(required = true, description = "")
  public Boolean isOnDelete() {
    return onDelete;
  }

  public void setOnDelete(Boolean onDelete) {
    this.onDelete = onDelete;
  }

  public Notification onHealthIssue(Boolean onHealthIssue) {
    this.onHealthIssue = onHealthIssue;
    return this;
  }

   /**
   * Get onHealthIssue
   * @return onHealthIssue
  **/
  @Schema(required = true, description = "")
  public Boolean isOnHealthIssue() {
    return onHealthIssue;
  }

  public void setOnHealthIssue(Boolean onHealthIssue) {
    this.onHealthIssue = onHealthIssue;
  }

  public Notification supportsOnGrab(Boolean supportsOnGrab) {
    this.supportsOnGrab = supportsOnGrab;
    return this;
  }

   /**
   * Get supportsOnGrab
   * @return supportsOnGrab
  **/
  @Schema(required = true, description = "")
  public Boolean isSupportsOnGrab() {
    return supportsOnGrab;
  }

  public void setSupportsOnGrab(Boolean supportsOnGrab) {
    this.supportsOnGrab = supportsOnGrab;
  }

  public Notification supportsOnDownload(Boolean supportsOnDownload) {
    this.supportsOnDownload = supportsOnDownload;
    return this;
  }

   /**
   * Get supportsOnDownload
   * @return supportsOnDownload
  **/
  @Schema(required = true, description = "")
  public Boolean isSupportsOnDownload() {
    return supportsOnDownload;
  }

  public void setSupportsOnDownload(Boolean supportsOnDownload) {
    this.supportsOnDownload = supportsOnDownload;
  }

  public Notification supportsOnUpgrade(Boolean supportsOnUpgrade) {
    this.supportsOnUpgrade = supportsOnUpgrade;
    return this;
  }

   /**
   * Get supportsOnUpgrade
   * @return supportsOnUpgrade
  **/
  @Schema(required = true, description = "")
  public Boolean isSupportsOnUpgrade() {
    return supportsOnUpgrade;
  }

  public void setSupportsOnUpgrade(Boolean supportsOnUpgrade) {
    this.supportsOnUpgrade = supportsOnUpgrade;
  }

  public Notification supportsOnRename(Boolean supportsOnRename) {
    this.supportsOnRename = supportsOnRename;
    return this;
  }

   /**
   * Get supportsOnRename
   * @return supportsOnRename
  **/
  @Schema(required = true, description = "")
  public Boolean isSupportsOnRename() {
    return supportsOnRename;
  }

  public void setSupportsOnRename(Boolean supportsOnRename) {
    this.supportsOnRename = supportsOnRename;
  }

  public Notification supportsOnDelete(Boolean supportsOnDelete) {
    this.supportsOnDelete = supportsOnDelete;
    return this;
  }

   /**
   * Get supportsOnDelete
   * @return supportsOnDelete
  **/
  @Schema(required = true, description = "")
  public Boolean isSupportsOnDelete() {
    return supportsOnDelete;
  }

  public void setSupportsOnDelete(Boolean supportsOnDelete) {
    this.supportsOnDelete = supportsOnDelete;
  }

  public Notification supportsOnHealthIssue(Boolean supportsOnHealthIssue) {
    this.supportsOnHealthIssue = supportsOnHealthIssue;
    return this;
  }

   /**
   * Get supportsOnHealthIssue
   * @return supportsOnHealthIssue
  **/
  @Schema(required = true, description = "")
  public Boolean isSupportsOnHealthIssue() {
    return supportsOnHealthIssue;
  }

  public void setSupportsOnHealthIssue(Boolean supportsOnHealthIssue) {
    this.supportsOnHealthIssue = supportsOnHealthIssue;
  }

  public Notification includeHealthWarnings(Boolean includeHealthWarnings) {
    this.includeHealthWarnings = includeHealthWarnings;
    return this;
  }

   /**
   * Get includeHealthWarnings
   * @return includeHealthWarnings
  **/
  @Schema(required = true, description = "")
  public Boolean isIncludeHealthWarnings() {
    return includeHealthWarnings;
  }

  public void setIncludeHealthWarnings(Boolean includeHealthWarnings) {
    this.includeHealthWarnings = includeHealthWarnings;
  }

  public Notification name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Notification fields(List<ProviderField> fields) {
    this.fields = fields;
    return this;
  }

  public Notification addFieldsItem(ProviderField fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @Schema(required = true, description = "")
  public List<ProviderField> getFields() {
    return fields;
  }

  public void setFields(List<ProviderField> fields) {
    this.fields = fields;
  }

  public Notification implementationName(String implementationName) {
    this.implementationName = implementationName;
    return this;
  }

   /**
   * Get implementationName
   * @return implementationName
  **/
  @Schema(required = true, description = "")
  public String getImplementationName() {
    return implementationName;
  }

  public void setImplementationName(String implementationName) {
    this.implementationName = implementationName;
  }

  public Notification implementation(String implementation) {
    this.implementation = implementation;
    return this;
  }

   /**
   * Get implementation
   * @return implementation
  **/
  @Schema(required = true, description = "")
  public String getImplementation() {
    return implementation;
  }

  public void setImplementation(String implementation) {
    this.implementation = implementation;
  }

  public Notification configContract(String configContract) {
    this.configContract = configContract;
    return this;
  }

   /**
   * Get configContract
   * @return configContract
  **/
  @Schema(required = true, description = "")
  public String getConfigContract() {
    return configContract;
  }

  public void setConfigContract(String configContract) {
    this.configContract = configContract;
  }

  public Notification infoLink(String infoLink) {
    this.infoLink = infoLink;
    return this;
  }

   /**
   * Get infoLink
   * @return infoLink
  **/
  @Schema(required = true, description = "")
  public String getInfoLink() {
    return infoLink;
  }

  public void setInfoLink(String infoLink) {
    this.infoLink = infoLink;
  }

  public Notification message(NotificationMessage message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(required = true, description = "")
  public NotificationMessage getMessage() {
    return message;
  }

  public void setMessage(NotificationMessage message) {
    this.message = message;
  }

  public Notification tags(List<Integer> tags) {
    this.tags = tags;
    return this;
  }

  public Notification addTagsItem(Integer tagsItem) {
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(required = true, description = "")
  public List<Integer> getTags() {
    return tags;
  }

  public void setTags(List<Integer> tags) {
    this.tags = tags;
  }

  public Notification id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Notification notification = (Notification) o;
    return Objects.equals(this.onGrab, notification.onGrab) &&
        Objects.equals(this.onDownload, notification.onDownload) &&
        Objects.equals(this.onUpgrade, notification.onUpgrade) &&
        Objects.equals(this.onRename, notification.onRename) &&
        Objects.equals(this.onDelete, notification.onDelete) &&
        Objects.equals(this.onHealthIssue, notification.onHealthIssue) &&
        Objects.equals(this.supportsOnGrab, notification.supportsOnGrab) &&
        Objects.equals(this.supportsOnDownload, notification.supportsOnDownload) &&
        Objects.equals(this.supportsOnUpgrade, notification.supportsOnUpgrade) &&
        Objects.equals(this.supportsOnRename, notification.supportsOnRename) &&
        Objects.equals(this.supportsOnDelete, notification.supportsOnDelete) &&
        Objects.equals(this.supportsOnHealthIssue, notification.supportsOnHealthIssue) &&
        Objects.equals(this.includeHealthWarnings, notification.includeHealthWarnings) &&
        Objects.equals(this.name, notification.name) &&
        Objects.equals(this.fields, notification.fields) &&
        Objects.equals(this.implementationName, notification.implementationName) &&
        Objects.equals(this.implementation, notification.implementation) &&
        Objects.equals(this.configContract, notification.configContract) &&
        Objects.equals(this.infoLink, notification.infoLink) &&
        Objects.equals(this.message, notification.message) &&
        Objects.equals(this.tags, notification.tags) &&
        Objects.equals(this.id, notification.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onGrab, onDownload, onUpgrade, onRename, onDelete, onHealthIssue, supportsOnGrab, supportsOnDownload, supportsOnUpgrade, supportsOnRename, supportsOnDelete, supportsOnHealthIssue, includeHealthWarnings, name, fields, implementationName, implementation, configContract, infoLink, message, tags, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Notification {\n");
    
    sb.append("    onGrab: ").append(toIndentedString(onGrab)).append("\n");
    sb.append("    onDownload: ").append(toIndentedString(onDownload)).append("\n");
    sb.append("    onUpgrade: ").append(toIndentedString(onUpgrade)).append("\n");
    sb.append("    onRename: ").append(toIndentedString(onRename)).append("\n");
    sb.append("    onDelete: ").append(toIndentedString(onDelete)).append("\n");
    sb.append("    onHealthIssue: ").append(toIndentedString(onHealthIssue)).append("\n");
    sb.append("    supportsOnGrab: ").append(toIndentedString(supportsOnGrab)).append("\n");
    sb.append("    supportsOnDownload: ").append(toIndentedString(supportsOnDownload)).append("\n");
    sb.append("    supportsOnUpgrade: ").append(toIndentedString(supportsOnUpgrade)).append("\n");
    sb.append("    supportsOnRename: ").append(toIndentedString(supportsOnRename)).append("\n");
    sb.append("    supportsOnDelete: ").append(toIndentedString(supportsOnDelete)).append("\n");
    sb.append("    supportsOnHealthIssue: ").append(toIndentedString(supportsOnHealthIssue)).append("\n");
    sb.append("    includeHealthWarnings: ").append(toIndentedString(includeHealthWarnings)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    implementationName: ").append(toIndentedString(implementationName)).append("\n");
    sb.append("    implementation: ").append(toIndentedString(implementation)).append("\n");
    sb.append("    configContract: ").append(toIndentedString(configContract)).append("\n");
    sb.append("    infoLink: ").append(toIndentedString(infoLink)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
