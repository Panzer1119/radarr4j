/*
 * Radarr
 * The way users should interact with Radarr programatically. To utilize any of these endpoints you will need a few pieces of information:  ex: localhost:7878/api/v3/movies?apiKey={key_here}  * url: localhost, 10.1.0.1, 192.168.1.1, etc * port: 7878 (unless you modify it) * apiKey: Located in Settings > General > Security
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.codemakers.radarr4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Image
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-12T01:48:34.579+02:00[Europe/Berlin]")
public class Image {
  /**
   * Gets or Sets coverType
   */
  @JsonAdapter(CoverTypeEnum.Adapter.class)
  public enum CoverTypeEnum {
    POSTER("poster"),
    FANART("fanart");

    private String value;

    CoverTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CoverTypeEnum fromValue(String text) {
      for (CoverTypeEnum b : CoverTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CoverTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CoverTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CoverTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return CoverTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("coverType")
  private CoverTypeEnum coverType = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("remoteUrl")
  private String remoteUrl = null;

  public Image coverType(CoverTypeEnum coverType) {
    this.coverType = coverType;
    return this;
  }

   /**
   * Get coverType
   * @return coverType
  **/
  @Schema(example = "poster", description = "")
  public CoverTypeEnum getCoverType() {
    return coverType;
  }

  public void setCoverType(CoverTypeEnum coverType) {
    this.coverType = coverType;
  }

  public Image url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(example = "/radarr/MediaCover/39/poster.jpg?lastWrite=637618111851086964", description = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public Image remoteUrl(String remoteUrl) {
    this.remoteUrl = remoteUrl;
    return this;
  }

   /**
   * Get remoteUrl
   * @return remoteUrl
  **/
  @Schema(example = "https://image.tmdb.org/t/p/original/i0FHyNF9VvQTXOi4yKnZJ1zql1.jpg", description = "")
  public String getRemoteUrl() {
    return remoteUrl;
  }

  public void setRemoteUrl(String remoteUrl) {
    this.remoteUrl = remoteUrl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Image image = (Image) o;
    return Objects.equals(this.coverType, image.coverType) &&
        Objects.equals(this.url, image.url) &&
        Objects.equals(this.remoteUrl, image.remoteUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coverType, url, remoteUrl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Image {\n");
    
    sb.append("    coverType: ").append(toIndentedString(coverType)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    remoteUrl: ").append(toIndentedString(remoteUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
