/*
 * Radarr
 * The way users should interact with Radarr programatically. To utilize any of these endpoints you will need a few pieces of information:  ex: localhost:7878/api/v3/movies?apiKey={key_here}  * url: localhost, 10.1.0.1, 192.168.1.1, etc * port: 7878 (unless you modify it) * apiKey: Located in Settings > General > Security
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.codemakers.radarr4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * MovieFileMediaInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-12T01:48:34.579+02:00[Europe/Berlin]")
public class MovieFileMediaInfo {
  @SerializedName("audioAdditionalFeatures")
  private String audioAdditionalFeatures = null;

  @SerializedName("audioBitrate")
  private BigDecimal audioBitrate = null;

  @SerializedName("audioChannels")
  private BigDecimal audioChannels = null;

  @SerializedName("audioCodec")
  private String audioCodec = null;

  @SerializedName("audioLanguages")
  private String audioLanguages = null;

  @SerializedName("audioStreamCount")
  private BigDecimal audioStreamCount = null;

  @SerializedName("videoBitDepth")
  private BigDecimal videoBitDepth = null;

  @SerializedName("videoBitrate")
  private BigDecimal videoBitrate = null;

  @SerializedName("videoCodec")
  private String videoCodec = null;

  @SerializedName("videoFps")
  private BigDecimal videoFps = null;

  @SerializedName("resolution")
  private String resolution = null;

  @SerializedName("runTime")
  private String runTime = null;

  @SerializedName("scanType")
  private String scanType = null;

  @SerializedName("subtitles")
  private String subtitles = null;

  public MovieFileMediaInfo audioAdditionalFeatures(String audioAdditionalFeatures) {
    this.audioAdditionalFeatures = audioAdditionalFeatures;
    return this;
  }

   /**
   * Get audioAdditionalFeatures
   * @return audioAdditionalFeatures
  **/
  @Schema(required = true, description = "")
  public String getAudioAdditionalFeatures() {
    return audioAdditionalFeatures;
  }

  public void setAudioAdditionalFeatures(String audioAdditionalFeatures) {
    this.audioAdditionalFeatures = audioAdditionalFeatures;
  }

  public MovieFileMediaInfo audioBitrate(BigDecimal audioBitrate) {
    this.audioBitrate = audioBitrate;
    return this;
  }

   /**
   * Get audioBitrate
   * @return audioBitrate
  **/
  @Schema(required = true, description = "")
  public BigDecimal getAudioBitrate() {
    return audioBitrate;
  }

  public void setAudioBitrate(BigDecimal audioBitrate) {
    this.audioBitrate = audioBitrate;
  }

  public MovieFileMediaInfo audioChannels(BigDecimal audioChannels) {
    this.audioChannels = audioChannels;
    return this;
  }

   /**
   * Get audioChannels
   * @return audioChannels
  **/
  @Schema(required = true, description = "")
  public BigDecimal getAudioChannels() {
    return audioChannels;
  }

  public void setAudioChannels(BigDecimal audioChannels) {
    this.audioChannels = audioChannels;
  }

  public MovieFileMediaInfo audioCodec(String audioCodec) {
    this.audioCodec = audioCodec;
    return this;
  }

   /**
   * Get audioCodec
   * @return audioCodec
  **/
  @Schema(required = true, description = "")
  public String getAudioCodec() {
    return audioCodec;
  }

  public void setAudioCodec(String audioCodec) {
    this.audioCodec = audioCodec;
  }

  public MovieFileMediaInfo audioLanguages(String audioLanguages) {
    this.audioLanguages = audioLanguages;
    return this;
  }

   /**
   * Get audioLanguages
   * @return audioLanguages
  **/
  @Schema(required = true, description = "")
  public String getAudioLanguages() {
    return audioLanguages;
  }

  public void setAudioLanguages(String audioLanguages) {
    this.audioLanguages = audioLanguages;
  }

  public MovieFileMediaInfo audioStreamCount(BigDecimal audioStreamCount) {
    this.audioStreamCount = audioStreamCount;
    return this;
  }

   /**
   * Get audioStreamCount
   * @return audioStreamCount
  **/
  @Schema(required = true, description = "")
  public BigDecimal getAudioStreamCount() {
    return audioStreamCount;
  }

  public void setAudioStreamCount(BigDecimal audioStreamCount) {
    this.audioStreamCount = audioStreamCount;
  }

  public MovieFileMediaInfo videoBitDepth(BigDecimal videoBitDepth) {
    this.videoBitDepth = videoBitDepth;
    return this;
  }

   /**
   * Get videoBitDepth
   * @return videoBitDepth
  **/
  @Schema(required = true, description = "")
  public BigDecimal getVideoBitDepth() {
    return videoBitDepth;
  }

  public void setVideoBitDepth(BigDecimal videoBitDepth) {
    this.videoBitDepth = videoBitDepth;
  }

  public MovieFileMediaInfo videoBitrate(BigDecimal videoBitrate) {
    this.videoBitrate = videoBitrate;
    return this;
  }

   /**
   * Get videoBitrate
   * @return videoBitrate
  **/
  @Schema(required = true, description = "")
  public BigDecimal getVideoBitrate() {
    return videoBitrate;
  }

  public void setVideoBitrate(BigDecimal videoBitrate) {
    this.videoBitrate = videoBitrate;
  }

  public MovieFileMediaInfo videoCodec(String videoCodec) {
    this.videoCodec = videoCodec;
    return this;
  }

   /**
   * Get videoCodec
   * @return videoCodec
  **/
  @Schema(required = true, description = "")
  public String getVideoCodec() {
    return videoCodec;
  }

  public void setVideoCodec(String videoCodec) {
    this.videoCodec = videoCodec;
  }

  public MovieFileMediaInfo videoFps(BigDecimal videoFps) {
    this.videoFps = videoFps;
    return this;
  }

   /**
   * Get videoFps
   * @return videoFps
  **/
  @Schema(required = true, description = "")
  public BigDecimal getVideoFps() {
    return videoFps;
  }

  public void setVideoFps(BigDecimal videoFps) {
    this.videoFps = videoFps;
  }

  public MovieFileMediaInfo resolution(String resolution) {
    this.resolution = resolution;
    return this;
  }

   /**
   * Get resolution
   * @return resolution
  **/
  @Schema(required = true, description = "")
  public String getResolution() {
    return resolution;
  }

  public void setResolution(String resolution) {
    this.resolution = resolution;
  }

  public MovieFileMediaInfo runTime(String runTime) {
    this.runTime = runTime;
    return this;
  }

   /**
   * Get runTime
   * @return runTime
  **/
  @Schema(required = true, description = "")
  public String getRunTime() {
    return runTime;
  }

  public void setRunTime(String runTime) {
    this.runTime = runTime;
  }

  public MovieFileMediaInfo scanType(String scanType) {
    this.scanType = scanType;
    return this;
  }

   /**
   * Get scanType
   * @return scanType
  **/
  @Schema(required = true, description = "")
  public String getScanType() {
    return scanType;
  }

  public void setScanType(String scanType) {
    this.scanType = scanType;
  }

  public MovieFileMediaInfo subtitles(String subtitles) {
    this.subtitles = subtitles;
    return this;
  }

   /**
   * Get subtitles
   * @return subtitles
  **/
  @Schema(required = true, description = "")
  public String getSubtitles() {
    return subtitles;
  }

  public void setSubtitles(String subtitles) {
    this.subtitles = subtitles;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MovieFileMediaInfo movieFileMediaInfo = (MovieFileMediaInfo) o;
    return Objects.equals(this.audioAdditionalFeatures, movieFileMediaInfo.audioAdditionalFeatures) &&
        Objects.equals(this.audioBitrate, movieFileMediaInfo.audioBitrate) &&
        Objects.equals(this.audioChannels, movieFileMediaInfo.audioChannels) &&
        Objects.equals(this.audioCodec, movieFileMediaInfo.audioCodec) &&
        Objects.equals(this.audioLanguages, movieFileMediaInfo.audioLanguages) &&
        Objects.equals(this.audioStreamCount, movieFileMediaInfo.audioStreamCount) &&
        Objects.equals(this.videoBitDepth, movieFileMediaInfo.videoBitDepth) &&
        Objects.equals(this.videoBitrate, movieFileMediaInfo.videoBitrate) &&
        Objects.equals(this.videoCodec, movieFileMediaInfo.videoCodec) &&
        Objects.equals(this.videoFps, movieFileMediaInfo.videoFps) &&
        Objects.equals(this.resolution, movieFileMediaInfo.resolution) &&
        Objects.equals(this.runTime, movieFileMediaInfo.runTime) &&
        Objects.equals(this.scanType, movieFileMediaInfo.scanType) &&
        Objects.equals(this.subtitles, movieFileMediaInfo.subtitles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioAdditionalFeatures, audioBitrate, audioChannels, audioCodec, audioLanguages, audioStreamCount, videoBitDepth, videoBitrate, videoCodec, videoFps, resolution, runTime, scanType, subtitles);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MovieFileMediaInfo {\n");
    
    sb.append("    audioAdditionalFeatures: ").append(toIndentedString(audioAdditionalFeatures)).append("\n");
    sb.append("    audioBitrate: ").append(toIndentedString(audioBitrate)).append("\n");
    sb.append("    audioChannels: ").append(toIndentedString(audioChannels)).append("\n");
    sb.append("    audioCodec: ").append(toIndentedString(audioCodec)).append("\n");
    sb.append("    audioLanguages: ").append(toIndentedString(audioLanguages)).append("\n");
    sb.append("    audioStreamCount: ").append(toIndentedString(audioStreamCount)).append("\n");
    sb.append("    videoBitDepth: ").append(toIndentedString(videoBitDepth)).append("\n");
    sb.append("    videoBitrate: ").append(toIndentedString(videoBitrate)).append("\n");
    sb.append("    videoCodec: ").append(toIndentedString(videoCodec)).append("\n");
    sb.append("    videoFps: ").append(toIndentedString(videoFps)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    runTime: ").append(toIndentedString(runTime)).append("\n");
    sb.append("    scanType: ").append(toIndentedString(scanType)).append("\n");
    sb.append("    subtitles: ").append(toIndentedString(subtitles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
